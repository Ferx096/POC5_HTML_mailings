{
  "name": "test_claude",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generate-infografia",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*",
          "rawBody": false
        }
      },
      "id": "9ba8c1b5-fd27-41d6-9e42-bb56affabb4b",
      "name": "Webhook FormData",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -5312,
        352
      ],
      "webhookId": "9a1ce852-b993-465b-8ff8-a5c4cc3a72e3",
      "notes": "Recibe FormData del frontend con archivos - CONFIGURACI√ìN CORREGIDA"
    },
    {
      "parameters": {
        "jsCode": "// Procesar FormData y seleccionar infograf√≠a por nombre \"Email\" - VERSI√ìN CORREGIDA\nconst items = $input.all();\n\nconsole.log('DEBUG: N√∫mero de items recibidos:', items.length);\nconsole.log('DEBUG: Estructura del primer item:', JSON.stringify(items[0], null, 2));\n\nif (!items || items.length === 0) {\n  throw new Error('No se recibieron datos en el webhook');\n}\n\nconst inputData = items[0];\n\n// N8N maneja FormData de manera espec√≠fica\nlet formData = {};\nlet files = {};\n\n// M√©todo 1: Datos en body.data (com√∫n en N8N con FormData)\nif (inputData.body && inputData.body.data) {\n  formData = inputData.body.data;\n  console.log('DEBUG: Usando body.data para formData');\n}\n// M√©todo 2: Datos directamente en body\nelse if (inputData.body) {\n  formData = inputData.body;\n  console.log('DEBUG: Usando body directo para formData');\n}\n// M√©todo 3: Datos en json\nelse if (inputData.json) {\n  formData = inputData.json;\n  console.log('DEBUG: Usando json para formData');\n}\n\n// Archivos binarios en N8N\nif (inputData.binary) {\n  files = inputData.binary;\n  console.log('DEBUG: Archivos encontrados en binary:', Object.keys(files));\n}\n\nconsole.log('DEBUG: FormData keys:', Object.keys(formData));\nconsole.log('DEBUG: Binary keys:', Object.keys(files));\n\n// Buscar projectName de forma flexible\nlet projectName = formData.projectName ||\n                  formData['projectName'] ||\n                  (formData.data && formData.data.projectName) ||\n                  null;\n\n// Si todav√≠a no se encuentra, buscar entre todas las keys disponibles (case-insensitive)\nif (!projectName) {\n  for (const [key, value] of Object.entries(formData)) {\n    if (typeof key === 'string' && key.toLowerCase().includes('project') && typeof value === 'string' && value.trim() !== '') {\n      projectName = value;\n      console.log(`DEBUG: projectName encontrado por key flexible: ${key} -> ${value}`);\n      break;\n    }\n    // Si es un objeto, buscar un subkey que contenga \"project\"\n    if (typeof value === 'object' && value !== null) {\n      for (const [subKey, subValue] of Object.entries(value)) {\n        if (typeof subKey === 'string' && subKey.toLowerCase().includes('project') && typeof subValue === 'string' && subValue.trim() !== '') {\n          projectName = subValue;\n          console.log(`DEBUG: projectName encontrado en objeto anidado: ${key}.${subKey} -> ${subValue}`);\n          break;\n        }\n      }\n    }\n    if (projectName) break;\n  }\n}\n\nif (!projectName) {\n  console.log('ERROR: No se encontr√≥ projectName. Dump de FormData completo:', JSON.stringify(formData, null, 2));\n  throw new Error(\n    'No se encontr√≥ el nombre del proyecto. Verifica que el campo \"projectName\" est√© siendo enviado correctamente. ' +\n    '\\nClaves disponibles en formData: ' + Object.keys(formData).join(', ')\n  );\n}\n\nconsole.log(`‚úì Proyecto detectado: ${projectName}`);\n\n// Buscar archivos con estrategia mejorada\nconst allImages = [];\nlet imageCount = 0;\n\n// Estrategia 1: Buscar en binary data (lo m√°s com√∫n en N8N)\nObject.keys(files).forEach(key => {\n  console.log(`Examinando key: ${key}, tipo:`, typeof files[key]);\n  \n  if (key.startsWith('imagen_') && files[key]) {\n    const fileData = files[key];\n    console.log(`Procesando archivo binary: ${key}`, {\n      fileName: fileData.fileName,\n      mimeType: fileData.mimeType,\n      hasData: !!fileData.data,\n      dataLength: fileData.data ? fileData.data.length : 0\n    });\n    \n    if (fileData.data) {\n      allImages.push({\n        fileName: fileData.fileName || `imagen_${imageCount + 1}.jpg`,\n        mimeType: fileData.mimeType || 'image/jpeg',\n        size: fileData.data.length,\n        data: fileData.data,\n        originalName: fileData.fileName || `imagen_${imageCount + 1}.jpg`,\n        index: imageCount,\n        source: 'binary'\n      });\n      imageCount++;\n      console.log(`‚úì Imagen agregada desde binary: ${fileData.fileName}, size: ${fileData.data.length}`);\n    }\n  }\n});\n\n// Estrategia 2: Buscar en formData si no encontramos en binary\nif (allImages.length === 0) {\n  console.log('No se encontraron im√°genes en binary, buscando en formData...');\n  \n  Object.keys(formData).forEach(key => {\n    if (key.startsWith('imagen_')) {\n      const fileData = formData[key];\n      console.log(`Examinando formData key: ${key}`, typeof fileData);\n      \n      if (fileData && typeof fileData === 'object') {\n        const imageFile = Array.isArray(fileData) ? fileData[0] : fileData;\n        \n        if (imageFile && (imageFile.data || imageFile.buffer)) {\n          const imageSize = imageFile.size || (imageFile.data ? imageFile.data.length : imageFile.buffer.length);\n          allImages.push({\n            fileName: imageFile.filename || imageFile.originalname || imageFile.name || `imagen_${imageCount + 1}.jpg`,\n            mimeType: imageFile.mimetype || imageFile.contentType || imageFile.type || 'image/jpeg',\n            size: imageSize,\n            data: imageFile.data || imageFile.buffer,\n            originalName: imageFile.originalname || imageFile.filename || imageFile.name || `imagen_${imageCount + 1}.jpg`,\n            index: imageCount,\n            source: 'formData'\n          });\n          imageCount++;\n          console.log(`‚úì Imagen agregada desde formData: ${imageFile.filename || 'sin_nombre'}, size: ${imageSize}`);\n        }\n      }\n    }\n  });\n}\n\n// Estrategia 3: Buscar por √≠ndices num√©ricos si los anteriores fallan\nif (allImages.length === 0) {\n  console.log('Buscando im√°genes por √≠ndices num√©ricos...');\n  \n  for (let i = 0; i < 10; i++) {\n    const keyBinary = `imagen_${i}`;\n    const keyForm = `imagen_${i}`;\n    \n    // Buscar en binary\n    if (files[keyBinary] && files[keyBinary].data) {\n      const fileData = files[keyBinary];\n      allImages.push({\n        fileName: fileData.fileName || `imagen_${i + 1}.jpg`,\n        mimeType: fileData.mimeType || 'image/jpeg',\n        size: fileData.data.length,\n        data: fileData.data,\n        originalName: fileData.fileName || `imagen_${i + 1}.jpg`,\n        index: i,\n        source: 'binary_indexed'\n      });\n      console.log(`‚úì Imagen encontrada por √≠ndice binary: ${i}, size: ${fileData.data.length}`);\n    }\n    // Buscar en formData\n    else if (formData[keyForm] && formData[keyForm].data) {\n      const fileData = formData[keyForm];\n      const imageSize = fileData.size || fileData.data.length;\n      allImages.push({\n        fileName: fileData.filename || `imagen_${i + 1}.jpg`,\n        mimeType: fileData.mimetype || 'image/jpeg',\n        size: imageSize,\n        data: fileData.data,\n        originalName: fileData.filename || `imagen_${i + 1}.jpg`,\n        index: i,\n        source: 'form_indexed'\n      });\n      console.log(`‚úì Imagen encontrada por √≠ndice form: ${i}, size: ${imageSize}`);\n    }\n  }\n}\n\n// Verificaci√≥n final\nif (allImages.length === 0) {\n  console.log('ERROR: No se encontraron im√°genes v√°lidas.');\n  console.log('FormData disponible:', Object.keys(formData));\n  console.log('Binary disponible:', Object.keys(files));\n  \n  throw new Error(`No se encontraron im√°genes v√°lidas. \n    FormData keys: ${Object.keys(formData).join(', ')}\n    Binary keys: ${Object.keys(files).join(', ')}\n    Verifica que las im√°genes se est√©n enviando con nombres 'imagen_0', 'imagen_1', etc.`);\n}\n\n// NUEVO CRITERIO: Buscar infograf√≠a por nombre que empiece con \"Email\"\nconsole.log('BUSCANDO INFOGRAF√çA POR NOMBRE \"Email\"...');\nconsole.log('Nombres de archivos disponibles:', allImages.map(img => img.fileName || img.originalName));\n\nconst infografiaImage = allImages.find(img => {\n  const fileName = (img.fileName || img.originalName || '').toLowerCase();\n  const startsWithEmail = fileName.startsWith('email');\n  \n  console.log(`Verificando imagen: ${img.fileName || img.originalName} - Empieza con \"email\": ${startsWithEmail}`);\n  return startsWithEmail;\n});\n\n// Si no se encuentra imagen con \"Email\", usar fallback por tama√±o\nif (!infografiaImage) {\n  console.log('WARNING: No se encontr√≥ imagen que empiece con \"Email\", usando fallback por tama√±o');\n  // Fallback: usar la imagen m√°s pesada\n  allImages.sort((a, b) => b.size - a.size);\n  var selectedInfografia = allImages[0];\n  var selectionMethod = 'fallback_size';\n} else {\n  var selectedInfografia = infografiaImage;\n  var selectionMethod = 'email_name';\n  console.log(`‚úì INFOGRAF√çA SELECCIONADA POR NOMBRE: ${infografiaImage.fileName || infografiaImage.originalName}`);\n}\n\n// Crear array de elementos (todas las im√°genes excepto la infograf√≠a)\nconst elementImages = allImages.filter(img => img !== selectedInfografia);\n\nconsole.log(`üéâ PROCESAMIENTO EXITOSO:`);\nconsole.log(`   Proyecto: ${projectName}`);\nconsole.log(`   Total im√°genes: ${allImages.length}`);\nconsole.log(`   Infograf√≠a principal: ${selectedInfografia.fileName || selectedInfografia.originalName} (${(selectedInfografia.size/1024/1024).toFixed(2)}MB)`);\nconsole.log(`   M√©todo de selecci√≥n: ${selectionMethod}`);\nconsole.log(`   Elementos adicionales: ${elementImages.length}`);\nconsole.log(`   Fuente de datos: ${selectedInfografia.source}`);\n\n// Generar ID √∫nico del proyecto con timestamp\nconst projectId = `${projectName.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}`;\nconst timestamp = new Date().toISOString();\n\nreturn {\n  json: {\n    project_id: projectId,\n    project_name: projectName,\n    timestamp: timestamp,\n    infografia_image: selectedInfografia, // La imagen que empieza con \"Email\"\n    element_images: elementImages,        // Todas las dem√°s im√°genes\n    total_images: allImages.length,\n    all_images: allImages, // Mantener array completo\n    selection_method: selectionMethod, // Para debug\n    ready_for_processing: true,\n    debug_info: {\n      formdata_keys: Object.keys(formData),\n      binary_keys: Object.keys(files),\n      images_found_in: allImages[0]?.source || 'none',\n      infografia_size_mb: (selectedInfografia.size/1024/1024).toFixed(2),\n      infografia_name: selectedInfografia.fileName || selectedInfografia.originalName,\n      elements_count: elementImages.length,\n      selection_method: selectionMethod,\n      webhook_input_structure: {\n        has_body: !!inputData.body,\n        has_binary: !!inputData.binary,\n        has_json: !!inputData.json\n      },\n      all_filenames: allImages.map(img => img.fileName || img.originalName)\n    }\n  }\n};"
      },
      "id": "a9ad8529-d241-4cb4-9cfd-62ac3b597f2d",
      "name": "Procesar FormData",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5104,
        352
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "tenant-id",
              "name": "TENANT_ID",
              "type": "string",
              "value": "9f7ea239-412b-4a34-b2a9-bbcbebd9536e"
            },
            {
              "id": "client-id",
              "name": "CLIENT_ID",
              "type": "string",
              "value": "d4fcadd0-f87e-4ed6-be5d-1b108afec2cf"
            },
            {
              "id": "client-secret",
              "name": "CLIENT_SECRET",
              "type": "string",
              "value": "API-SECRET"
            },
            {
              "id": "sharepoint-host",
              "name": "SHAREPOINT_HOSTNAME",
              "type": "string",
              "value": "netorgft4158062.sharepoint.com"
            },
            {
              "id": "sharepoint-site",
              "name": "SHAREPOINT_SITE",
              "type": "string",
              "value": "RespuestasdeFormulariodetraspasos"
            },
            {
              "id": "claude-api-key",
              "name": "CLAUDE_API_KEY",
              "type": "string",
              "value": "API-CLAUDE"
            }
          ]
        },
        "options": {}
      },
      "id": "658d3608-cba4-4a26-bc91-33b2c35e0200",
      "name": "Configurar Credenciales",
      "type": "n8n-nodes-base.set",
      "position": [
        -4912,
        352
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://login.microsoftonline.com/{{ $json.TENANT_ID }}/oauth2/v2.0/token",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "client_credentials"
            },
            {
              "name": "client_id",
              "value": "={{ $json.CLIENT_ID }}"
            },
            {
              "name": "client_secret",
              "value": "={{ $json.CLIENT_SECRET }}"
            },
            {
              "name": "scope",
              "value": "https://graph.microsoft.com/.default"
            }
          ]
        },
        "options": {}
      },
      "id": "77c8135e-c1b2-4a97-afc8-ba318da92148",
      "name": "Autenticar SharePoint",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -4704,
        352
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "url": "=https://graph.microsoft.com/v1.0/sites/{{ $('Configurar Credenciales').item.json.SHAREPOINT_HOSTNAME }}:/sites/{{ $('Configurar Credenciales').item.json.SHAREPOINT_SITE }}:",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.access_token }}"
            }
          ]
        },
        "options": {}
      },
      "id": "0d19c4ae-9d49-4232-a81a-742283d17cfa",
      "name": "Obtener Info Site",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -4512,
        352
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "// Preparar estructura de carpetas del proyecto\nconst projectData = $input.first().json;\nconst siteId = projectData.id;\nconst accessToken = projectData.access_token;\nconst projectId = projectData.project_id;\n\n// Crear estructura de carpetas organizada\nconst baseFolder = `/Documentos compartidos/HTML_Mailings`;\nconst projectFolder = `${baseFolder}/${projectId}`;\nconst imagesFolder = `${projectFolder}/images`;\nconst outputFolder = `${projectFolder}`;\n\nreturn {\n  json: {\n    ...projectData,\n    SITE_ID: siteId,\n    access_token: accessToken,\n    BASE_FOLDER: baseFolder,\n    PROJECT_FOLDER: projectFolder,\n    IMAGES_FOLDER: imagesFolder,\n    OUTPUT_FOLDER: outputFolder,\n    folders_structure: [\n      {\n        path: baseFolder,\n        name: 'HTML_Mailings',\n        parent: '/Documentos compartidos'\n      },\n      {\n        path: projectFolder,\n        name: projectId,\n        parent: baseFolder\n      },\n      {\n        path: imagesFolder,\n        name: 'images',\n        parent: projectFolder\n      }\n    ]\n  }\n};"
      },
      "id": "24f87777-2136-477b-8caa-a4ebdb7b9b25",
      "name": "Preparar Estructura Carpetas",
      "type": "n8n-nodes-base.code",
      "position": [
        -4304,
        352
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c33d3ea6-7cbb-4972-bd5a-99c4b7346dc8",
      "name": "Crear Carpetas",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -4112,
        352
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "6b6773c4-002c-4d7c-a810-047ba296095c",
      "name": "Procesar Im√°genes",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -3872,
        528
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "jsCode": "// Preparar datos para Claude - VERSI√ìN CORREGIDA PARA CREDENCIALES\nconst allUploads = $input.all();\nconsole.log('=== DEBUG PREPARAR PROMPT CLAUDE ===');\nconsole.log('N√∫mero de uploads recibidos:', allUploads.length);\n\nif (!allUploads || allUploads.length === 0) {\n  throw new Error('No se recibieron datos de uploads');\n}\n\n// Obtener datos del primer upload\nlet projectData = allUploads[0].json;\nlet uploadedImages = [];\n\n// CR√çTICO: Asegurar que las credenciales est√©n presentes\n// Si no est√°n en projectData, obtenerlas del nodo Configurar Credenciales\nif (!projectData.CLAUDE_API_KEY) {\n  try {\n    const credencialesData = $('Configurar Credenciales').first().json;\n    if (credencialesData && credencialesData.CLAUDE_API_KEY) {\n      console.log('‚úì Obteniendo CLAUDE_API_KEY desde nodo Configurar Credenciales');\n      projectData.CLAUDE_API_KEY = credencialesData.CLAUDE_API_KEY;\n      projectData.TENANT_ID = credencialesData.TENANT_ID;\n      projectData.CLIENT_ID = credencialesData.CLIENT_ID;\n      projectData.CLIENT_SECRET = credencialesData.CLIENT_SECRET;\n      projectData.SHAREPOINT_HOSTNAME = credencialesData.SHAREPOINT_HOSTNAME;\n      projectData.SHAREPOINT_SITE = credencialesData.SHAREPOINT_SITE;\n    } else {\n      throw new Error('No se encontr√≥ CLAUDE_API_KEY en el nodo Configurar Credenciales');\n    }\n  } catch (e) {\n    console.log('ERROR: No se pudo acceder a las credenciales:', e.message);\n    throw new Error('CLAUDE_API_KEY no encontrado. Verifica el nodo Configurar Credenciales.');\n  }\n}\n\nconsole.log('‚úì CLAUDE_API_KEY verificado:', projectData.CLAUDE_API_KEY ? 'Presente' : 'FALTANTE');\n\n// ESTRATEGIA 1: Si tenemos m√∫ltiples uploads con current_image\nif (allUploads.length > 1 && allUploads[0].json.current_image) {\n  console.log('Procesando m√∫ltiples uploads');\n  \n  uploadedImages = allUploads\n    .filter(upload => upload.json && upload.json.current_image)\n    .map((upload, index) => {\n      const currentImage = upload.json.current_image;\n      \n      return {\n        fileName: currentImage.cleanFileName || `imagen_${index + 1}.jpg`,\n        originalName: currentImage.originalName || currentImage.fileName || `imagen_${index + 1}.jpg`,\n        relativePath: `./images/${currentImage.cleanFileName || `imagen_${index + 1}.jpg`}`,\n        index: index + 1,\n        size: currentImage.size || 0,\n        isReference: index === 0\n      };\n    });\n}\n// ESTRATEGIA 2: Reconstruir desde all_images si est√° disponible\nelse if (projectData.all_images && Array.isArray(projectData.all_images)) {\n  console.log('Reconstruyendo desde all_images');\n  \n  uploadedImages = projectData.all_images.map((image, index) => {\n    const cleanFileName = `img_${String(index + 1).padStart(2, '0')}_${(image.fileName || `imagen_${index + 1}.jpg`).replace(/[^a-zA-Z0-9\\\\.]/g, '_')}`;\n    \n    return {\n      fileName: cleanFileName,\n      originalName: image.originalName || image.fileName || `imagen_${index + 1}.jpg`,\n      relativePath: `./images/${cleanFileName}`,\n      index: index + 1,\n      size: image.size || 0,\n      isReference: index === 0\n    };\n  });\n}\n// ESTRATEGIA 3: Un solo upload con current_image\nelse if (projectData.current_image) {\n  console.log('Procesando upload √∫nico');\n  \n  const currentImage = projectData.current_image;\n  uploadedImages = [{\n    fileName: currentImage.cleanFileName || 'imagen_1.jpg',\n    originalName: currentImage.originalName || currentImage.fileName || 'imagen_1.jpg',\n    relativePath: `./images/${currentImage.cleanFileName || 'imagen_1.jpg'}`,\n    index: 1,\n    size: currentImage.size || 0,\n    isReference: true\n  }];\n}\n// ESTRATEGIA 4: Fallback - crear imagen dummy\nelse {\n  console.log('Fallback: creando imagen dummy');\n  \n  uploadedImages = [{\n    fileName: 'imagen_principal.jpg',\n    originalName: 'imagen_principal.jpg',\n    relativePath: './images/imagen_principal.jpg',\n    index: 1,\n    size: 0,\n    isReference: true\n  }];\n}\n\nconsole.log('Im√°genes procesadas para Claude:', uploadedImages.length);\n\n// Construir prompt profesional mejorado\nconst claudePrompt = `Eres un experto desarrollador de emails HTML para Prima AFP.\n\nTarea: Genera un email HTML profesional basado en la imagen de referencia principal y los elementos adicionales proporcionados.\n\nIm√°genes disponibles:\n${uploadedImages.map(img => \n  `- ${img.fileName} ${img.isReference ? '(IMAGEN PRINCIPAL DE REFERENCIA)' : '(elemento)'} - usar como: ${img.relativePath}`\n).join('\\n')}\n\nEspecificaciones t√©cnicas OBLIGATORIAS:\n\n1. **Estructura base:**\n   - DOCTYPE XHTML 1.0 Transitional\n   - Tabla principal: 600px de ancho, centrada\n   - Fuente: Arial, Helvetica, sans-serif\n   - Colores Prima AFP: #FF4F00 (naranja), #45494E (gris), #1c1c1c (negro)\n\n2. **Elementos obligatorios:**\n   - Header con imagen principal\n   - Saludo: \"Hola, [Nombre del Cliente]:\" (color #FF4F00, 24px, bold)\n   - Contenido principal recreando exactamente lo que ves en la imagen de referencia\n   - Footer con logo Credicorp y datos legales\n\n3. **T√©cnico:**\n   - Solo tablas para layout (compatible Outlook)\n   - Padding: 50px laterales para contenido\n   - Im√°genes con rutas relativas \"images/nombre.extensi√≥n\"\n   - Responsive manteniendo estructura de tabla\n\n4. **Importante:**\n   - Reproduce EXACTAMENTE el texto de la imagen principal\n   - Mant√©n proporciones y colores originales\n   - Usa las im√°genes de elementos donde corresponda\n\nGenera el c√≥digo HTML completo y funcional:`;\n\nreturn {\n  json: {\n    ...projectData,\n    uploaded_images: uploadedImages,\n    claude_prompt: claudePrompt,\n    total_uploaded: uploadedImages.length,\n    reference_image_name: uploadedImages[0]?.fileName || 'imagen_principal.jpg',\n    // ASEGURAR que las credenciales est√©n presentes\n    CLAUDE_API_KEY: projectData.CLAUDE_API_KEY,\n    processing_strategy: uploadedImages.length > 1 ? 'multiple_uploads' : 'single_upload',\n    debug_info: {\n      total_inputs: allUploads.length,\n      has_all_images: !!(projectData.all_images),\n      has_current_image: !!(projectData.current_image),\n      final_images_count: uploadedImages.length,\n      claude_key_present: !!projectData.CLAUDE_API_KEY\n    }\n  }\n};"
      },
      "id": "a1b6673f-c662-4a83-bad3-0c5f27b83eac",
      "name": "Preparar Prompt Claude",
      "type": "n8n-nodes-base.code",
      "position": [
        -3632,
        336
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// Procesar respuesta de Claude\nconst response = $input.first().json;\nconst projectData = $input.first().json;\n\n// Extraer HTML limpio\nlet htmlContent = '';\nif (response.content && response.content[0] && response.content[0].text) {\n  htmlContent = response.content[0].text;\n  // Limpiar markdown si existe\n  htmlContent = htmlContent.replace(/```html\\n?/g, '').replace(/```\\n?$/g, '').trim();\n}\n\nif (!htmlContent) {\n  throw new Error('No se gener√≥ contenido HTML v√°lido');\n}\n\n// Preparar archivo HTML final\nconst timestamp = new Date().toISOString();\nconst htmlFileName = `${projectData.project_name}_mailing_${Date.now()}.html`;\nconst htmlPath = `${projectData.PROJECT_FOLDER}/${htmlFileName}`;\n\n// Agregar metadatos\nconst finalHtml = `<!-- \n  Email HTML generado autom√°ticamente\n  Proyecto: ${projectData.project_name}\n  Fecha: ${timestamp}\n  Total im√°genes: ${projectData.total_uploaded}\n  Imagen principal: ${projectData.reference_image_name}\n-->\n${htmlContent}`;\n\nreturn {\n  json: {\n    ...projectData,\n    generated_html: finalHtml,\n    html_file_name: htmlFileName,\n    html_path: htmlPath,\n    generation_complete: true\n  }\n};"
      },
      "id": "4d6f6e6f-76db-4d3e-a6be-40619e5bb0a4",
      "name": "Procesar HTML",
      "type": "n8n-nodes-base.code",
      "position": [
        -3200,
        336
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://graph.microsoft.com/v1.0/sites/{{ $('Preparar Estructura Carpetas').item.json.SITE_ID }}/drive/root:{{ $('Preparar Estructura Carpetas').item.json.PROJECT_FOLDER }}/{{ $json.html_file_name }}:/content",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Autenticar SharePoint').item.json.access_token }}"
            },
            {
              "name": "Content-Type",
              "value": "text/html; charset=utf-8"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "={{ 'text/html; charset=utf-8' }}",
        "body": "={{ $json.content[0].text }}",
        "options": {}
      },
      "id": "c0ac4d62-67ac-4357-9bd1-d080fc9d7c76",
      "name": "Subir HTML",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -3008,
        336
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success",
              "name": "success",
              "type": "boolean",
              "value": true
            },
            {
              "id": "project-name",
              "name": "projectName",
              "type": "string",
              "value": "={{ $('Procesar FormData').item.json.project_name }}"
            },
            {
              "id": "files",
              "name": "files",
              "type": "object",
              "value": "={{ $json.file }}"
            },
            {
              "id": "paths",
              "name": "paths",
              "type": "string",
              "value": "={{ $json.webUrl }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ff2032b3-c9af-401c-8062-bbf38080b873",
      "name": "Respuesta Final",
      "type": "n8n-nodes-base.set",
      "position": [
        -2800,
        336
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "resource": "image",
        "modelId": {
          "__rl": true,
          "value": "claude-opus-4-20250514",
          "mode": "list",
          "cachedResultName": "claude-opus-4-20250514"
        },
        "text": "={{ $json.claude_prompt }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.anthropic",
      "typeVersion": 1,
      "position": [
        -3408,
        336
      ],
      "id": "b42cc892-59b8-4def-a063-de12f676a2a1",
      "name": "Analyze image",
      "credentials": {
        "anthropicApi": {
          "id": "n0KxFEUYcoVgBZOi",
          "name": "Anthropic account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook FormData": {
      "main": [
        [
          {
            "node": "Procesar FormData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar FormData": {
      "main": [
        [
          {
            "node": "Configurar Credenciales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configurar Credenciales": {
      "main": [
        [
          {
            "node": "Autenticar SharePoint",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Autenticar SharePoint": {
      "main": [
        [
          {
            "node": "Obtener Info Site",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener Info Site": {
      "main": [
        [
          {
            "node": "Preparar Estructura Carpetas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Estructura Carpetas": {
      "main": [
        [
          {
            "node": "Crear Carpetas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crear Carpetas": {
      "main": [
        [
          {
            "node": "Procesar Im√°genes",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Procesar Im√°genes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar Im√°genes": {
      "main": [
        [
          {
            "node": "Preparar Prompt Claude",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Preparar Prompt Claude",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Prompt Claude": {
      "main": [
        [
          {
            "node": "Analyze image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar HTML": {
      "main": [
        [
          {
            "node": "Subir HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Subir HTML": {
      "main": [
        [
          {
            "node": "Respuesta Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze image": {
      "main": [
        [
          {
            "node": "Procesar HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3a527116-b004-4ae1-8602-33e2abc62974",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c4f576128860ee17e4a2b421d3b3157b65ebefc2f24308fec2dd5d369f0fe737"
  },
  "id": "Jci6d2kR8rVd86bQ",
  "tags": []
}