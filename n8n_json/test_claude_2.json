{
  "name": "test_claude_2",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generate-infografia",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*",
          "rawBody": false
        }
      },
      "id": "64077b12-ed1a-420c-a4b6-726c35dc1f71",
      "name": "Webhook FormData",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2128,
        336
      ],
      "webhookId": "9a1ce852-b993-465b-8ff8-a5c4cc3a72e3",
      "notes": "Recibe FormData del frontend con archivos - CONFIGURACI√ìN CORREGIDA"
    },
    {
      "parameters": {
        "jsCode": "// Procesar FormData y seleccionar infograf√≠a por nombre \"Email\" - VERSI√ìN CORREGIDA\nconst items = $input.all();\n\nconsole.log('DEBUG: N√∫mero de items recibidos:', items.length);\nconsole.log('DEBUG: Estructura del primer item:', JSON.stringify(items[0], null, 2));\n\nif (!items || items.length === 0) {\n  throw new Error('No se recibieron datos en el webhook');\n}\n\nconst inputData = items[0];\n\n// N8N maneja FormData de manera espec√≠fica\nlet formData = {};\nlet files = {};\n\n// M√©todo 1: Datos en body.data (com√∫n en N8N con FormData)\nif (inputData.body && inputData.body.data) {\n  formData = inputData.body.data;\n  console.log('DEBUG: Usando body.data para formData');\n}\n// M√©todo 2: Datos directamente en body\nelse if (inputData.body) {\n  formData = inputData.body;\n  console.log('DEBUG: Usando body directo para formData');\n}\n// M√©todo 3: Datos en json\nelse if (inputData.json) {\n  formData = inputData.json;\n  console.log('DEBUG: Usando json para formData');\n}\n\n// Archivos binarios en N8N\nif (inputData.binary) {\n  files = inputData.binary;\n  console.log('DEBUG: Archivos encontrados en binary:', Object.keys(files));\n}\n\nconsole.log('DEBUG: FormData keys:', Object.keys(formData));\nconsole.log('DEBUG: Binary keys:', Object.keys(files));\n\n// Buscar projectName de forma flexible\nlet projectName = formData.projectName ||\n                  formData['projectName'] ||\n                  (formData.data && formData.data.projectName) ||\n                  null;\n\n// Si todav√≠a no se encuentra, buscar entre todas las keys disponibles (case-insensitive)\nif (!projectName) {\n  for (const [key, value] of Object.entries(formData)) {\n    if (typeof key === 'string' && key.toLowerCase().includes('project') && typeof value === 'string' && value.trim() !== '') {\n      projectName = value;\n      console.log(`DEBUG: projectName encontrado por key flexible: ${key} -> ${value}`);\n      break;\n    }\n    // Si es un objeto, buscar un subkey que contenga \"project\"\n    if (typeof value === 'object' && value !== null) {\n      for (const [subKey, subValue] of Object.entries(value)) {\n        if (typeof subKey === 'string' && subKey.toLowerCase().includes('project') && typeof subValue === 'string' && subValue.trim() !== '') {\n          projectName = subValue;\n          console.log(`DEBUG: projectName encontrado en objeto anidado: ${key}.${subKey} -> ${subValue}`);\n          break;\n        }\n      }\n    }\n    if (projectName) break;\n  }\n}\n\nif (!projectName) {\n  console.log('ERROR: No se encontr√≥ projectName. Dump de FormData completo:', JSON.stringify(formData, null, 2));\n  throw new Error(\n    'No se encontr√≥ el nombre del proyecto. Verifica que el campo \"projectName\" est√© siendo enviado correctamente. ' +\n    '\\nClaves disponibles en formData: ' + Object.keys(formData).join(', ')\n  );\n}\n\nconsole.log(`‚úì Proyecto detectado: ${projectName}`);\n\n// Buscar archivos con estrategia mejorada\nconst allImages = [];\nlet imageCount = 0;\n\n// Estrategia 1: Buscar en binary data (lo m√°s com√∫n en N8N)\nObject.keys(files).forEach(key => {\n  console.log(`Examinando key: ${key}, tipo:`, typeof files[key]);\n  \n  if (key.startsWith('imagen_') && files[key]) {\n    const fileData = files[key];\n    console.log(`Procesando archivo binary: ${key}`, {\n      fileName: fileData.fileName,\n      mimeType: fileData.mimeType,\n      hasData: !!fileData.data,\n      dataLength: fileData.data ? fileData.data.length : 0\n    });\n    \n    if (fileData.data) {\n      allImages.push({\n        fileName: fileData.fileName || `imagen_${imageCount + 1}.jpg`,\n        mimeType: fileData.mimeType || 'image/jpeg',\n        size: fileData.data.length,\n        data: fileData.data,\n        originalName: fileData.fileName || `imagen_${imageCount + 1}.jpg`,\n        index: imageCount,\n        source: 'binary'\n      });\n      imageCount++;\n      console.log(`‚úì Imagen agregada desde binary: ${fileData.fileName}, size: ${fileData.data.length}`);\n    }\n  }\n});\n\n// Estrategia 2: Buscar en formData si no encontramos en binary\nif (allImages.length === 0) {\n  console.log('No se encontraron im√°genes en binary, buscando en formData...');\n  \n  Object.keys(formData).forEach(key => {\n    if (key.startsWith('imagen_')) {\n      const fileData = formData[key];\n      console.log(`Examinando formData key: ${key}`, typeof fileData);\n      \n      if (fileData && typeof fileData === 'object') {\n        const imageFile = Array.isArray(fileData) ? fileData[0] : fileData;\n        \n        if (imageFile && (imageFile.data || imageFile.buffer)) {\n          const imageSize = imageFile.size || (imageFile.data ? imageFile.data.length : imageFile.buffer.length);\n          allImages.push({\n            fileName: imageFile.filename || imageFile.originalname || imageFile.name || `imagen_${imageCount + 1}.jpg`,\n            mimeType: imageFile.mimetype || imageFile.contentType || imageFile.type || 'image/jpeg',\n            size: imageSize,\n            data: imageFile.data || imageFile.buffer,\n            originalName: imageFile.originalname || imageFile.filename || imageFile.name || `imagen_${imageCount + 1}.jpg`,\n            index: imageCount,\n            source: 'formData'\n          });\n          imageCount++;\n          console.log(`‚úì Imagen agregada desde formData: ${imageFile.filename || 'sin_nombre'}, size: ${imageSize}`);\n        }\n      }\n    }\n  });\n}\n\n// Estrategia 3: Buscar por √≠ndices num√©ricos si los anteriores fallan\nif (allImages.length === 0) {\n  console.log('Buscando im√°genes por √≠ndices num√©ricos...');\n  \n  for (let i = 0; i < 10; i++) {\n    const keyBinary = `imagen_${i}`;\n    const keyForm = `imagen_${i}`;\n    \n    // Buscar en binary\n    if (files[keyBinary] && files[keyBinary].data) {\n      const fileData = files[keyBinary];\n      allImages.push({\n        fileName: fileData.fileName || `imagen_${i + 1}.jpg`,\n        mimeType: fileData.mimeType || 'image/jpeg',\n        size: fileData.data.length,\n        data: fileData.data,\n        originalName: fileData.fileName || `imagen_${i + 1}.jpg`,\n        index: i,\n        source: 'binary_indexed'\n      });\n      console.log(`‚úì Imagen encontrada por √≠ndice binary: ${i}, size: ${fileData.data.length}`);\n    }\n    // Buscar en formData\n    else if (formData[keyForm] && formData[keyForm].data) {\n      const fileData = formData[keyForm];\n      const imageSize = fileData.size || fileData.data.length;\n      allImages.push({\n        fileName: fileData.filename || `imagen_${i + 1}.jpg`,\n        mimeType: fileData.mimetype || 'image/jpeg',\n        size: imageSize,\n        data: fileData.data,\n        originalName: fileData.filename || `imagen_${i + 1}.jpg`,\n        index: i,\n        source: 'form_indexed'\n      });\n      console.log(`‚úì Imagen encontrada por √≠ndice form: ${i}, size: ${imageSize}`);\n    }\n  }\n}\n\n// Verificaci√≥n final\nif (allImages.length === 0) {\n  console.log('ERROR: No se encontraron im√°genes v√°lidas.');\n  console.log('FormData disponible:', Object.keys(formData));\n  console.log('Binary disponible:', Object.keys(files));\n  \n  throw new Error(`No se encontraron im√°genes v√°lidas. \n    FormData keys: ${Object.keys(formData).join(', ')}\n    Binary keys: ${Object.keys(files).join(', ')}\n    Verifica que las im√°genes se est√©n enviando con nombres 'imagen_0', 'imagen_1', etc.`);\n}\n\n// NUEVO CRITERIO: Buscar infograf√≠a por nombre que empiece con \"Email\"\nconsole.log('BUSCANDO INFOGRAF√çA POR NOMBRE \"Email\"...');\nconsole.log('Nombres de archivos disponibles:', allImages.map(img => img.fileName || img.originalName));\n\nconst infografiaImage = allImages.find(img => {\n  const fileName = (img.fileName || img.originalName || '').toLowerCase();\n  const startsWithEmail = fileName.startsWith('email');\n  \n  console.log(`Verificando imagen: ${img.fileName || img.originalName} - Empieza con \"email\": ${startsWithEmail}`);\n  return startsWithEmail;\n});\n\n// Si no se encuentra imagen con \"Email\", usar fallback por tama√±o\nif (!infografiaImage) {\n  console.log('WARNING: No se encontr√≥ imagen que empiece con \"Email\", usando fallback por tama√±o');\n  // Fallback: usar la imagen m√°s pesada\n  allImages.sort((a, b) => b.size - a.size);\n  var selectedInfografia = allImages[0];\n  var selectionMethod = 'fallback_size';\n} else {\n  var selectedInfografia = infografiaImage;\n  var selectionMethod = 'email_name';\n  console.log(`‚úì INFOGRAF√çA SELECCIONADA POR NOMBRE: ${infografiaImage.fileName || infografiaImage.originalName}`);\n}\n\n// Crear array de elementos (todas las im√°genes excepto la infograf√≠a)\nconst elementImages = allImages.filter(img => img !== selectedInfografia);\n\nconsole.log(`üéâ PROCESAMIENTO EXITOSO:`);\nconsole.log(`   Proyecto: ${projectName}`);\nconsole.log(`   Total im√°genes: ${allImages.length}`);\nconsole.log(`   Infograf√≠a principal: ${selectedInfografia.fileName || selectedInfografia.originalName} (${(selectedInfografia.size/1024/1024).toFixed(2)}MB)`);\nconsole.log(`   M√©todo de selecci√≥n: ${selectionMethod}`);\nconsole.log(`   Elementos adicionales: ${elementImages.length}`);\nconsole.log(`   Fuente de datos: ${selectedInfografia.source}`);\n\n// Generar ID √∫nico del proyecto con timestamp\nconst projectId = `${projectName.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}`;\nconst timestamp = new Date().toISOString();\n\nreturn {\n  json: {\n    project_id: projectId,\n    project_name: projectName,\n    timestamp: timestamp,\n    infografia_image: selectedInfografia, // La imagen que empieza con \"Email\"\n    element_images: elementImages,        // Todas las dem√°s im√°genes\n    total_images: allImages.length,\n    all_images: allImages, // Mantener array completo\n    selection_method: selectionMethod, // Para debug\n    ready_for_processing: true,\n    debug_info: {\n      formdata_keys: Object.keys(formData),\n      binary_keys: Object.keys(files),\n      images_found_in: allImages[0]?.source || 'none',\n      infografia_size_mb: (selectedInfografia.size/1024/1024).toFixed(2),\n      infografia_name: selectedInfografia.fileName || selectedInfografia.originalName,\n      elements_count: elementImages.length,\n      selection_method: selectionMethod,\n      webhook_input_structure: {\n        has_body: !!inputData.body,\n        has_binary: !!inputData.binary,\n        has_json: !!inputData.json\n      },\n      all_filenames: allImages.map(img => img.fileName || img.originalName)\n    }\n  }\n};"
      },
      "id": "a40c2a47-7980-4f8a-a5f4-78f300224955",
      "name": "Procesar FormData",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1920,
        336
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "tenant-id",
              "name": "TENANT_ID",
              "type": "string",
              "value": "9f7ea239-412b-4a34-b2a9-bbcbebd9536e"
            },
            {
              "id": "client-id",
              "name": "CLIENT_ID",
              "type": "string",
              "value": "d4fcadd0-f87e-4ed6-be5d-1b108afec2cf"
            },
            {
              "id": "client-secret",
              "name": "CLIENT_SECRET",
              "type": "string",
              "value": "API-SECRET"
            },
            {
              "id": "sharepoint-host",
              "name": "SHAREPOINT_HOSTNAME",
              "type": "string",
              "value": "netorgft4158062.sharepoint.com"
            },
            {
              "id": "sharepoint-site",
              "name": "SHAREPOINT_SITE",
              "type": "string",
              "value": "RespuestasdeFormulariodetraspasos"
            },
            {
              "id": "claude-api-key",
              "name": "CLAUDE_API_KEY",
              "type": "string",
              "value": "API-CLAUDE"
            }
          ]
        },
        "options": {}
      },
      "id": "97b35a41-f2e4-444a-891d-02233b767760",
      "name": "Configurar Credenciales",
      "type": "n8n-nodes-base.set",
      "position": [
        -1728,
        336
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://login.microsoftonline.com/{{ $json.TENANT_ID }}/oauth2/v2.0/token",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "client_credentials"
            },
            {
              "name": "client_id",
              "value": "={{ $json.CLIENT_ID }}"
            },
            {
              "name": "client_secret",
              "value": "={{ $json.CLIENT_SECRET }}"
            },
            {
              "name": "scope",
              "value": "https://graph.microsoft.com/.default"
            }
          ]
        },
        "options": {}
      },
      "id": "781b242b-6721-45fc-a1bf-ce02c4058c7d",
      "name": "Autenticar SharePoint",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -1520,
        336
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "url": "=https://graph.microsoft.com/v1.0/sites/{{ $('Configurar Credenciales').item.json.SHAREPOINT_HOSTNAME }}:/sites/{{ $('Configurar Credenciales').item.json.SHAREPOINT_SITE }}:",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.access_token }}"
            }
          ]
        },
        "options": {}
      },
      "id": "5554c851-68ba-4675-8a9a-6ad86b632619",
      "name": "Obtener Info Site",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -1328,
        336
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "// Preparar estructura de carpetas organizada por proyecto - VERSI√ìN MEJORADA\nconst projectData = $input.first().json;\nconst siteId = projectData.id;\nconst accessToken = projectData.access_token;\nconst projectId = projectData.project_id;\n\n// NUEVA ESTRUCTURA: Carpeta individual por ejecuci√≥n\nconst baseFolder = `/Documentos compartidos/HTML_Mailings`;\nconst projectFolder = `${baseFolder}/${projectId}`; // Carpeta √∫nica por ejecuci√≥n\nconst infografiaFolder = `${projectFolder}/infografia`; // Solo para la imagen principal\nconst elementosFolder = `${projectFolder}/elementos`; // Para im√°genes adicionales\nconst outputFolder = projectFolder; // HTML se guarda en la ra√≠z del proyecto\n\nconsole.log('üìÅ NUEVA ESTRUCTURA DE CARPETAS:');\nconsole.log(`   Base: ${baseFolder}`);\nconsole.log(`   Proyecto: ${projectFolder}`);\nconsole.log(`   Infograf√≠a: ${infografiaFolder}`);\nconsole.log(`   Elementos: ${elementosFolder}`);\nconsole.log(`   Salida HTML: ${outputFolder}`);\n\nreturn {\n  json: {\n    ...projectData,\n    SITE_ID: siteId,\n    access_token: accessToken,\n    BASE_FOLDER: baseFolder,\n    PROJECT_FOLDER: projectFolder,\n    INFOGRAFIA_FOLDER: infografiaFolder,\n    ELEMENTOS_FOLDER: elementosFolder,\n    OUTPUT_FOLDER: outputFolder,\n    folders_structure: [\n      {\n        path: baseFolder,\n        name: 'HTML_Mailings',\n        parent: '/Documentos compartidos',\n        description: 'Carpeta base para todos los proyectos'\n      },\n      {\n        path: projectFolder,\n        name: projectId,\n        parent: baseFolder,\n        description: 'Carpeta √∫nica del proyecto actual'\n      },\n      {\n        path: infografiaFolder,\n        name: 'infografia',\n        parent: projectFolder,\n        description: 'Solo para la imagen principal (m√°s pesada)'\n      },\n      {\n        path: elementosFolder,\n        name: 'elementos',\n        parent: projectFolder,\n        description: 'Para im√°genes adicionales/elementos'\n      }\n    ]\n  }\n};"
      },
      "id": "4db6f7d4-fba5-4479-9058-b7b1389df15d",
      "name": "Preparar Estructura Carpetas",
      "type": "n8n-nodes-base.code",
      "position": [
        -1120,
        336
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "80a8e147-3b41-4543-b4e2-576d285e0a53",
      "name": "Crear Carpetas",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -928,
        336
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "jsCode": "// Subir SOLO la imagen de infograf√≠a (la m√°s pesada) - NUEVA L√ìGICA\nconst inputItems = $input.all();\n\nconsole.log('=== DEBUG SUBIR INFOGRAF√çA ===');\nconsole.log('N√∫mero de items recibidos:', inputItems.length);\n\nif (!inputItems || inputItems.length === 0) {\n  throw new Error(\"No se recibieron datos de entrada en Subir Infograf√≠a.\");\n}\n\n// El primer item contiene toda la informaci√≥n\nconst mainData = inputItems[0].json;\n\nconsole.log('Keys disponibles en mainData:', Object.keys(mainData));\n\n// Verificar que tenemos los datos necesarios\nif (!mainData) {\n  throw new Error(\"No se encontraron datos JSON en la entrada de Subir Infograf√≠a.\");\n}\n\n// Obtener la imagen de infograf√≠a (la m√°s pesada)\nlet infografiaImage = null;\n\n// Estrategia 1: Buscar infografia_image directamente\nif (mainData.infografia_image) {\n  infografiaImage = mainData.infografia_image;\n  console.log('‚úì Encontrada infografia_image directamente');\n}\n// Estrategia 2: Buscar el primer elemento de all_images (ya est√° ordenado por tama√±o)\nelse if (mainData.all_images && Array.isArray(mainData.all_images) && mainData.all_images.length > 0) {\n  infografiaImage = mainData.all_images[0]; // El primero es el m√°s pesado\n  console.log('‚úì Usando el primer elemento de all_images como infograf√≠a');\n}\n// Estrategia 3: Acceder al nodo anterior\nelse {\n  try {\n    const procesamientoData = $('Procesar FormData').first().json;\n    if (procesamientoData && procesamientoData.infografia_image) {\n      infografiaImage = procesamientoData.infografia_image;\n      console.log('‚úì Obtenida infografia_image desde nodo Procesar FormData');\n      \n      // Combinar con los datos actuales\n      Object.assign(mainData, procesamientoData);\n    }\n  } catch (e) {\n    console.log('No se pudo acceder al nodo Procesar FormData:', e.message);\n  }\n}\n\n// Verificaci√≥n final\nif (!infografiaImage) {\n  console.log('ERROR: No se encontr√≥ imagen de infograf√≠a');\n  console.log('Datos disponibles:', Object.keys(mainData));\n  \n  throw new Error(`Imagen de infograf√≠a no encontrada. Claves disponibles: ${Object.keys(mainData).join(', ')}. Verifica que se haya procesado correctamente.`);\n}\n\nconsole.log('Infograf√≠a a subir:', {\n  fileName: infografiaImage.fileName,\n  size: infografiaImage.size,\n  hasData: !!(infografiaImage.data || infografiaImage.buffer),\n  sizeMB: (infografiaImage.size / 1024 / 1024).toFixed(2)\n});\n\n// Verificar que la imagen tiene datos v√°lidos\nif (!infografiaImage.data && !infografiaImage.buffer) {\n  throw new Error(`La imagen de infograf√≠a no tiene datos v√°lidos. Propiedades disponibles: ${Object.keys(infografiaImage).join(', ')}`);\n}\n\n// Generar nombre limpio para la imagen de infograf√≠a\nconst baseFileName = infografiaImage.fileName || infografiaImage.originalName || 'infografia_principal.jpg';\nconst cleanFileName = `infografia_${baseFileName.replace(/[^a-zA-Z0-9\\.]/g, '_')}`;\n\n// Construir la ruta de destino en la carpeta de infograf√≠a\nconst infografiaFolder = mainData.INFOGRAFIA_FOLDER || `${mainData.PROJECT_FOLDER}/infografia`;\nconst targetPath = `${infografiaFolder}/${cleanFileName}`;\n\nconsole.log(`‚úì Subiendo infograf√≠a principal`);\nconsole.log(`  Nombre: ${cleanFileName}`);\nconsole.log(`  Tama√±o: ${(infografiaImage.size / 1024 / 1024).toFixed(2)}MB`);\nconsole.log(`  Ruta: ${targetPath}`);\n\n// Preparar datos binarios\nconst binaryData = infografiaImage.data || infografiaImage.buffer;\nconst mimeType = infografiaImage.mimeType || infografiaImage.mimetype || 'image/jpeg';\n\nreturn {\n  json: {\n    ...mainData,\n    infografia_uploaded: {\n      ...infografiaImage,\n      cleanFileName: cleanFileName,\n      targetPath: targetPath,\n      relativePath: `./infografia/${cleanFileName}`,\n      uploaded: true\n    },\n    upload_info: {\n      type: 'infografia',\n      fileName: cleanFileName,\n      sizeMB: (infografiaImage.size / 1024 / 1024).toFixed(2),\n      folder: infografiaFolder\n    }\n  },\n  binary: {\n    data: {\n      data: binaryData,\n      mimeType: mimeType,\n      fileName: cleanFileName\n    }\n  }\n};"
      },
      "id": "e239b752-4ed2-49e4-bbb3-f5be3c287cbb",
      "name": "Preparar Infograf√≠a",
      "type": "n8n-nodes-base.code",
      "position": [
        -560,
        16
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://graph.microsoft.com/v1.0/sites/{{ $('Preparar Estructura Carpetas').item.json.SITE_ID }}/drive/root:{{ $('Preparar Estructura Carpetas').item.json.PROJECT_FOLDER }}/{{ $json.html_file_name }}:/content",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.access_token }}"
            },
            {
              "name": "Content-Type",
              "value": "={{ $json.infografia_uploaded.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {
          "timeout": 30000
        }
      },
      "id": "6a505b16-386f-4271-a34e-4b7c83ae4577",
      "name": "Subir Infograf√≠a",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -368,
        32
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "7d128ebb-e31e-4d02-b975-0f835936d994",
      "name": "Procesar Elementos",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -544,
        336
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "jsCode": "// Procesar elementos adicionales (todas las im√°genes excepto la infograf√≠a)\nconst inputItems = $input.all();\n\nconsole.log('=== DEBUG PREPARAR ELEMENTO ===');\nconsole.log('N√∫mero de items recibidos:', inputItems.length);\n\nif (!inputItems || inputItems.length === 0) {\n  throw new Error(\"No se recibieron datos de entrada en Preparar Elemento.\");\n}\n\n// El primer item contiene toda la informaci√≥n\nconst mainData = inputItems[0].json;\n\nconsole.log('Keys disponibles en mainData:', Object.keys(mainData));\n\n// Verificar que tenemos los datos necesarios\nif (!mainData) {\n  throw new Error(\"No se encontraron datos JSON en la entrada de Preparar Elemento.\");\n}\n\n// Obtener las im√°genes de elementos (todas excepto la primera que es la infograf√≠a)\nlet elementImages = [];\nlet currentBatchIndex = 0;\n\n// Estrategia 1: Buscar element_images directamente\nif (mainData.element_images && Array.isArray(mainData.element_images)) {\n  elementImages = mainData.element_images;\n  console.log('‚úì Encontrado element_images array con', elementImages.length, 'elementos');\n}\n// Estrategia 2: Extraer desde all_images (saltando el primero que es la infograf√≠a) else if (mainData.all_images && Array.isArray(mainData.all_images) && mainData.all_images.length > 1) {\n  elementImages = mainData.all_images.slice(1); // Omitir el primer elemento (infograf√≠a)\n  console.log('‚úì Extrayendo elementos desde all_images:', elementImages.length, 'elementos');\n}\n// Estrategia 3: Acceder al nodo anterior\nelse {\n  try {\n    const procesamientoData = $('Procesar FormData').first().json;\n    if (procesamientoData && procesamientoData.element_images) {\n      elementImages = procesamientoData.element_images;\n      console.log('‚úì Obtenido element_images desde nodo Procesar FormData');\n      \n      // Combinar con los datos actuales\n      Object.assign(mainData, procesamientoData);\n    } else if (procesamientoData && procesamientoData.all_images && procesamientoData.all_images.length > 1) {\n      elementImages = procesamientoData.all_images.slice(1);\n      console.log('‚úì Extrayendo elementos desde Procesar FormData all_images');\n      Object.assign(mainData, procesamientoData);\n    }\n  } catch (e) {\n    console.log('No se pudo acceder al nodo Procesar FormData:', e.message);\n  }\n}\n\n// Si no hay elementos adicionales, retornamos sin procesar\nif (!elementImages || !Array.isArray(elementImages) || elementImages.length === 0) {\n  console.log('‚ÑπÔ∏è No hay elementos adicionales para procesar. Solo infograf√≠a principal.');\n  return {\n    json: {\n      ...mainData,\n      no_elements: true,\n      elements_count: 0,\n      message: 'No hay elementos adicionales para procesar'\n    }\n  };\n}\n\n// Obtener el √≠ndice del batch actual\nif (typeof mainData.batchIndex === 'number') {\n  currentBatchIndex = mainData.batchIndex;\n} else if (typeof mainData.$index === 'number') {\n  currentBatchIndex = mainData.$index;\n} else if (typeof mainData.index === 'number') {\n  currentBatchIndex = mainData.index;\n} else {\n  console.log('WARNING: No se encontr√≥ √≠ndice de batch, usando 0');\n  currentBatchIndex = 0;\n}\n\nconsole.log('√çndice del batch actual:', currentBatchIndex);\nconsole.log('Total de elementos disponibles:', elementImages.length);\n\n// Validar que el √≠ndice est√° en rango\nif (currentBatchIndex < 0 || currentBatchIndex >= elementImages.length) {\n  throw new Error(`√çndice de batch inv√°lido: ${currentBatchIndex}. Total elementos: ${elementImages.length}`);\n}\n\n// Obtener el elemento actual\nconst currentElement = elementImages[currentBatchIndex];\n\nif (!currentElement) {\n  throw new Error(`No se encontr√≥ elemento en el √≠ndice ${currentBatchIndex}`);\n}\n\nconsole.log('Elemento actual:', {\n  index: currentBatchIndex,\n  fileName: currentElement.fileName,\n  size: currentElement.size,\n  hasData: !!(currentElement.data || currentElement.buffer)\n});\n\n// Verificar que el elemento tiene datos v√°lidos\nif (!currentElement.data && !currentElement.buffer) {\n  throw new Error(`El elemento en √≠ndice ${currentBatchIndex} no tiene datos v√°lidos. Propiedades disponibles: ${Object.keys(currentElement).join(', ')}`);\n}\n\n// Generar nombre limpio para el elemento\nconst baseFileName = currentElement.fileName || currentElement.originalName || `elemento_${currentBatchIndex + 1}.jpg`;\nconst cleanFileName = `elemento_${String(currentBatchIndex + 1).padStart(2, '0')}_${baseFileName.replace(/[^a-zA-Z0-9\\.]/g, '_')}`;\n\n// Construir la ruta de destino en la carpeta de elementos\nconst elementosFolder = mainData.ELEMENTOS_FOLDER || `${mainData.PROJECT_FOLDER}/elementos`;\nconst targetPath = `${elementosFolder}/${cleanFileName}`;\n\nconsole.log(`‚úì Procesando elemento ${currentBatchIndex + 1}/${elementImages.length}`);\nconsole.log(`  Nombre: ${cleanFileName}`);\nconsole.log(`  Tama√±o: ${(currentElement.size / 1024 / 1024).toFixed(2)}MB`);\nconsole.log(`  Ruta: ${targetPath}`);\n\n// Preparar datos binarios\nconst binaryData = currentElement.data || currentElement.buffer;\nconst mimeType = currentElement.mimeType || currentElement.mimetype || 'image/jpeg';\n\nreturn {\n  json: {\n    ...mainData,\n    current_element: {\n      ...currentElement,\n      cleanFileName: cleanFileName,\n      targetPath: targetPath,\n      relativePath: `./elementos/${cleanFileName}`,\n      uploadIndex: currentBatchIndex + 1,\n      totalElements: elementImages.length\n    },\n    batch_info: {\n      currentIndex: currentBatchIndex,\n      totalElements: elementImages.length,\n      isLast: currentBatchIndex === elementImages.length - 1\n    }\n  },\n  binary: {\n    data: {\n      data: binaryData,\n      mimeType: mimeType,\n      fileName: cleanFileName\n    }\n  }\n};"
      },
      "id": "dfa6a138-8e0a-4ea6-b598-a59a513a22c9",
      "name": "Preparar Elemento",
      "type": "n8n-nodes-base.code",
      "position": [
        -368,
        336
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://graph.microsoft.com/v1.0/sites/{{ $json.SITE_ID }}/drive/root:{{ $json.current_element.targetPath }}:/content",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.access_token }}"
            },
            {
              "name": "Content-Type",
              "value": "={{ $json.current_element.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          },
          "timeout": 30000
        }
      },
      "id": "5a212cd8-fd68-454f-ade2-fc907d881f35",
      "name": "Subir Elemento",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -192,
        336
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "// Preparar prompt mejorado para Claude - ENFOQUE EN INFOGRAF√çA\nconst allUploads = $input.all();\nconsole.log('=== DEBUG PREPARAR PROMPT CLAUDE MEJORADO ===');\nconsole.log('N√∫mero de uploads recibidos:', allUploads.length);\n\nif (!allUploads || allUploads.length === 0) {\n  throw new Error('No se recibieron datos de uploads');\n}\n\n// Obtener datos del primer upload\nlet projectData = allUploads[0].json;\nlet uploadedElements = [];\nlet infografiaData = null;\n\n// CR√çTICO: Asegurar que las credenciales est√©n presentes\nif (!projectData.CLAUDE_API_KEY) {\n  try {\n    const credencialesData = $('Configurar Credenciales').first().json;\n    if (credencialesData && credencialesData.CLAUDE_API_KEY) {\n      console.log('‚úì Obteniendo CLAUDE_API_KEY desde nodo Configurar Credenciales');\n      projectData.CLAUDE_API_KEY = credencialesData.CLAUDE_API_KEY;\n      projectData.TENANT_ID = credencialesData.TENANT_ID;\n      projectData.CLIENT_ID = credencialesData.CLIENT_ID;\n      projectData.CLIENT_SECRET = credencialesData.CLIENT_SECRET;\n      projectData.SHAREPOINT_HOSTNAME = credencialesData.SHAREPOINT_HOSTNAME;\n      projectData.SHAREPOINT_SITE = credencialesData.SHAREPOINT_SITE;\n    } else {\n      throw new Error('No se encontr√≥ CLAUDE_API_KEY en el nodo Configurar Credenciales');\n    }\n  } catch (e) {\n    console.log('ERROR: No se pudo acceder a las credenciales:', e.message);\n    throw new Error('CLAUDE_API_KEY no encontrado. Verifica el nodo Configurar Credenciales.');\n  }\n}\n\nconsole.log('‚úì CLAUDE_API_KEY verificado:', projectData.CLAUDE_API_KEY ? 'Presente' : 'FALTANTE');\n\n// Obtener informaci√≥n de la infograf√≠a subida\nif (projectData.infografia_uploaded) {\n  infografiaData = projectData.infografia_uploaded;\n  console.log('‚úì Infograf√≠a encontrada:', infografiaData.cleanFileName);\n} else {\n  // Buscar en uploads anteriores\n  try {\n    const infografiaUpload = $('Subir Infograf√≠a').first().json;\n    if (infografiaUpload && infografiaUpload.infografia_uploaded) {\n      infografiaData = infografiaUpload.infografia_uploaded;\n      console.log('‚úì Infograf√≠a obtenida desde nodo Subir Infograf√≠a');\n    }\n  } catch (e) {\n    console.log('No se pudo acceder al nodo Subir Infograf√≠a:', e.message);\n  }\n}\n\n// Procesar elementos subidos (si los hay)\nif (allUploads.length > 1 && allUploads.some(upload => upload.json && upload.json.current_element)) {\n  console.log('Procesando m√∫ltiples elementos subidos');\n  \n  uploadedElements = allUploads\n    .filter(upload => upload.json && upload.json.current_element && !upload.json.no_elements)\n    .map((upload, index) => {\n      const currentElement = upload.json.current_element;\n      \n      return {\n        fileName: currentElement.cleanFileName,\n        originalName: currentElement.originalName || currentElement.fileName,\n        relativePath: currentElement.relativePath,\n        index: currentElement.uploadIndex || index + 1,\n        size: currentElement.size || 0,\n        sizeMB: ((currentElement.size || 0) / 1024 / 1024).toFixed(2)\n      };\n    });\n} else if (projectData.element_images && Array.isArray(projectData.element_images)) {\n  console.log('Reconstruyendo elementos desde element_images');\n  \n  uploadedElements = projectData.element_images.map((element, index) => {\n    const cleanFileName = `elemento_${String(index + 1).padStart(2, '0')}_${(element.fileName || `elemento_${index + 1}.jpg`).replace(/[^a-zA-Z0-9\\\\.]/g, '_')}`;\n    \n    return {\n      fileName: cleanFileName,\n      originalName: element.originalName || element.fileName || `elemento_${index + 1}.jpg`,\n      relativePath: `./elementos/${cleanFileName}`,\n      index: index + 1,\n      size: element.size || 0,\n      sizeMB: ((element.size || 0) / 1024 / 1024).toFixed(2)\n    };\n  });\n}\n\nconsole.log('Elementos procesados para Claude:', uploadedElements.length);\nconsole.log('Infograf√≠a principal:', infografiaData ? infografiaData.cleanFileName : 'NO ENCONTRADA');\n\nif (!infografiaData) {\n  throw new Error('No se encontr√≥ la infograf√≠a principal. Verifica que se haya subido correctamente.');\n}\n\n// Construir prompt mejorado y espec√≠fico para infograf√≠as\nconst claudePrompt = `Eres un experto desarrollador de emails HTML corporativos especializado en recrear infograf√≠as como emails responsivos.\n\n**TAREA PRINCIPAL:**\nAnaliza la imagen de infograf√≠a adjunta y genera un email HTML que reproduzca EXACTAMENTE el contenido visual, texto, colores, y disposici√≥n de elementos.\n\n**IMAGEN PRINCIPAL:**\n- Infograf√≠a: ${infografiaData.cleanFileName} (${infografiaData.sizeMB || 'N/A'}MB)\n- Esta es la imagen que debes analizar y recrear como HTML\n\n${uploadedElements.length > 0 ? `**ELEMENTOS ADICIONALES DISPONIBLES:**\n${uploadedElements.map(elem => \n  `- ${elem.fileName} (${elem.sizeMB}MB) - usar como: ${elem.relativePath}`\n).join('\\n')}\n` : '**ELEMENTOS ADICIONALES:** Ninguno - trabajar solo con la infograf√≠a principal\\n'}\n\n**ESPECIFICACIONES T√âCNICAS OBLIGATORIAS:**\n\n1. **An√°lisis de la infograf√≠a:**\n   - Identifica TODOS los textos presentes en la imagen\n   - Reproduce los colores exactos (usa color picker visual)\n   - Mant√©n las proporciones y jerarqu√≠a visual\n   - Identifica iconos, gr√°ficos y elementos decorativos\n\n2. **Estructura HTML:**\n   - DOCTYPE XHTML 1.0 Transitional para m√°xima compatibilidad\n   - Tabla principal: width=\"600\" cellpadding=\"0\" cellspacing=\"0\"\n   - Solo usar tablas para layout (compatible con Outlook)\n   - Fuente: Arial, Helvetica, sans-serif como base\n\n3. **Elementos obligatorios del email:**\n   - Header corporativo Prima AFP\n   - Saludo personalizado: \"Hola, [Nombre del Cliente]:\" (color #FF4F00, 24px, bold)\n   - Recreaci√≥n exacta del contenido de la infograf√≠a\n   - Call-to-action prominente si existe en la infograf√≠a\n   - Footer con logo Credicorp y datos legales\n\n4. **Colores corporativos Prima AFP:**\n   - Naranja corporativo: #FF4F00\n   - Gris corporativo: #45494E\n   - Negro: #1c1c1c\n   - Usar los colores espec√≠ficos que veas en la infograf√≠a\n\n5. **Responsive y compatibilidad:**\n   - Media queries para m√≥viles\n   - Mantener estructura de tabla en versi√≥n m√≥vil\n   - Padding horizontal: 50px en desktop, 20px en m√≥vil\n   - Im√°genes con width=\"100%\" style=\"max-width: [tama√±o]px;\"\n\n6. **Referencias de im√°genes:**\n   - Imagen principal: ${infografiaData.relativePath}\n${uploadedElements.length > 0 ? uploadedElements.map(elem => `   - ${elem.originalName}: ${elem.relativePath}`).join('\\n') : '   - Solo usar la imagen principal de infograf√≠a'}\n\n**INSTRUCCIONES CR√çTICAS:**\n- Lee PALABRA POR PALABRA todo el texto visible en la infograf√≠a\n- Replica EXACTAMENTE los t√≠tulos, subt√≠tulos, p√°rrafos y call-to-actions\n- Mant√©n el orden visual y la jerarqu√≠a de informaci√≥n\n- Si hay gr√°ficos o iconos, descr√≠belos detalladamente para recrearlos con CSS\n- Aseg√∫rate de que el email se vea id√©ntico a la infograf√≠a original\n\n**OUTPUT ESPERADO:**\nHTML completo, funcional y listo para producci√≥n que reproduzca fielmente la infograf√≠a como email corporativo.`;\n\nreturn {\n  json: {\n    ...projectData,\n    uploaded_elements: uploadedElements,\n    infografia_data: infografiaData,\n    claude_prompt: claudePrompt,\n    total_elements: uploadedElements.length,\n    infografia_file: infografiaData.cleanFileName,\n    // ASEGURAR que las credenciales est√©n presentes\n    CLAUDE_API_KEY: projectData.CLAUDE_API_KEY,\n    processing_strategy: 'infografia_focused',\n    debug_info: {\n      total_inputs: allUploads.length,\n      has_infografia: !!infografiaData,\n      elements_count: uploadedElements.length,\n      claude_key_present: !!projectData.CLAUDE_API_KEY,\n      infografia_size_mb: infografiaData ? infografiaData.sizeMB : 'N/A'\n    }\n  }\n};"
      },
      "id": "1b9eb13f-e8c9-4139-a5bf-f6c70d125f18",
      "name": "Preparar Prompt Claude",
      "type": "n8n-nodes-base.code",
      "position": [
        0,
        320
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// Procesar respuesta de Claude y preparar HTML final\nconst response = $input.first().json;\nconst projectData = $input.first().json;\n\nconsole.log('=== DEBUG PROCESAR HTML CLAUDE ===');\nconsole.log('Respuesta recibida:', {\n  hasContent: !!(response.content),\n  contentLength: response.content ? response.content.length : 0,\n  hasText: !!(response.content && response.content[0] && response.content[0].text)\n});\n\n// Extraer HTML limpio de la respuesta de Claude\nlet htmlContent = '';\nif (response.content && response.content[0] && response.content[0].text) {\n  htmlContent = response.content[0].text;\n  \n  // Limpiar markdown si existe\n  htmlContent = htmlContent.replace(/```html\\n?/g, '').replace(/```\\n?$/g, '').trim();\n  \n  console.log('‚úì HTML extra√≠do, longitud:', htmlContent.length);\n} else {\n  console.log('ERROR: Estructura de respuesta inesperada:', JSON.stringify(response, null, 2));\n  throw new Error('No se gener√≥ contenido HTML v√°lido desde Claude');\n}\n\nif (!htmlContent || htmlContent.length < 100) {\n  throw new Error(`HTML generado demasiado corto (${htmlContent.length} caracteres). Verifica la respuesta de Claude.`);\n}\n\n// Validar que es HTML v√°lido b√°sico\nif (!htmlContent.includes('<html') && !htmlContent.includes('<!DOCTYPE')) {\n  console.log('WARNING: HTML no contiene estructura b√°sica, agregando wrapper...');\n  htmlContent = `<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\"utf-8\">\\n<title>Email - ${projectData.project_name}</title>\\n</head>\\n<body>\\n${htmlContent}\\n</body>\\n</html>`;\n}\n\n// Preparar metadatos del archivo HTML\nconst timestamp = new Date().toISOString();\nconst htmlFileName = `${projectData.project_name.replace(/[^a-zA-Z0-9]/g, '_')}_email_${Date.now()}.html`;\nconst htmlPath = `${projectData.PROJECT_FOLDER}/${htmlFileName}`;\n\n// Agregar comentarios informativos al HTML\nconst finalHtml = `<!-- \n  ===============================================\n  EMAIL HTML GENERADO AUTOM√ÅTICAMENTE\n  ===============================================\n  Proyecto: ${projectData.project_name}\n  Fecha: ${timestamp}\n  Infograf√≠a base: ${projectData.infografia_data ? projectData.infografia_data.cleanFileName : 'N/A'}\n  Elementos adicionales: ${projectData.total_elements || 0}\n  Generado por: Claude AI\n  ===============================================\n-->\n${htmlContent}`;\n\nconsole.log('‚úì HTML final preparado:', {\n  fileName: htmlFileName,\n  path: htmlPath,\n  size: finalHtml.length,\n  hasInfografia: !!(projectData.infografia_data)\n});\n\nreturn {\n  json: {\n    ...projectData,\n    generated_html: finalHtml,\n    html_file_name: htmlFileName,\n    html_path: htmlPath,\n    html_size: finalHtml.length,\n    generation_complete: true,\n    generation_timestamp: timestamp,\n    success: true\n  }\n};"
      },
      "id": "e2beb8c7-1bdc-497f-86b1-b55b55996d6e",
      "name": "Procesar HTML",
      "type": "n8n-nodes-base.code",
      "position": [
        432,
        304
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://graph.microsoft.com/v1.0/sites/{{ $('Preparar Estructura Carpetas').item.json.SITE_ID }}/drive/root:{{ $json.html_path }}:/content",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Autenticar SharePoint').item.json.access_token }}"
            },
            {
              "name": "Content-Type",
              "value": "text/html; charset=utf-8"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "text/html; charset=utf-8",
        "body": "={{ $json.generated_html }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "c02bf9fa-7e99-4cc5-b80b-9c5544245627",
      "name": "Subir HTML",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        640,
        304
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success",
              "name": "success",
              "type": "boolean",
              "value": true
            },
            {
              "id": "project-name",
              "name": "projectName",
              "type": "string",
              "value": "={{ $('Procesar FormData').item.json.project_name }}"
            },
            {
              "id": "project-id",
              "name": "projectId",
              "type": "string",
              "value": "={{ $('Procesar FormData').item.json.project_id }}"
            },
            {
              "id": "html-file",
              "name": "htmlFile",
              "type": "object",
              "value": "={{ { \"name\": $json.html_file_name, \"path\": $json.html_path, \"url\": $json.webUrl, \"size\": $json.html_size } }}"
            },
            {
              "id": "infografia",
              "name": "infografia",
              "type": "object",
              "value": "={{ $json.infografia_data || {} }}"
            },
            {
              "id": "elementos",
              "name": "elementos",
              "type": "array",
              "value": "={{ $json.uploaded_elements || [] }}"
            },
            {
              "id": "summary",
              "name": "summary",
              "type": "object",
              "value": "={{ { \"totalImages\": ($json.total_elements || 0) + 1, \"infografiaSize\": $json.infografia_data ? $json.infografia_data.sizeMB : \"0\", \"htmlGenerated\": $json.generation_complete, \"timestamp\": $json.generation_timestamp } }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f989fd07-42d3-4fdd-861a-4b58e0456d0a",
      "name": "Respuesta Final",
      "type": "n8n-nodes-base.set",
      "position": [
        848,
        368
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "resource": "image",
        "modelId": {
          "__rl": true,
          "value": "claude-opus-4-20250514",
          "mode": "list",
          "cachedResultName": "claude-opus-4-20250514"
        },
        "text": "={{ $json.claude_prompt }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.anthropic",
      "typeVersion": 1,
      "position": [
        208,
        320
      ],
      "id": "2140d3da-1c0f-47a8-9f32-0e2e03ff723b",
      "name": "Analyze image",
      "credentials": {
        "anthropicApi": {
          "id": "n0KxFEUYcoVgBZOi",
          "name": "Anthropic account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook FormData": {
      "main": [
        [
          {
            "node": "Procesar FormData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar FormData": {
      "main": [
        [
          {
            "node": "Configurar Credenciales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configurar Credenciales": {
      "main": [
        [
          {
            "node": "Autenticar SharePoint",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Autenticar SharePoint": {
      "main": [
        [
          {
            "node": "Obtener Info Site",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener Info Site": {
      "main": [
        [
          {
            "node": "Preparar Estructura Carpetas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Estructura Carpetas": {
      "main": [
        [
          {
            "node": "Crear Carpetas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crear Carpetas": {
      "main": [
        [
          {
            "node": "Preparar Infograf√≠a",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Preparar Infograf√≠a",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Infograf√≠a": {
      "main": [
        [
          {
            "node": "Subir Infograf√≠a",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Subir Infograf√≠a": {
      "main": [
        [
          {
            "node": "Procesar Elementos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar Elementos": {
      "main": [
        [
          {
            "node": "Preparar Elemento",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Preparar Prompt Claude",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Elemento": {
      "main": [
        [
          {
            "node": "Subir Elemento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Subir Elemento": {
      "main": [
        [
          {
            "node": "Preparar Prompt Claude",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Prompt Claude": {
      "main": [
        [
          {
            "node": "Analyze image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar HTML": {
      "main": [
        [
          {
            "node": "Subir HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Subir HTML": {
      "main": [
        [
          {
            "node": "Respuesta Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze image": {
      "main": [
        [
          {
            "node": "Procesar HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fde7a6c1-f0b6-4abf-9f4e-52f367828420",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c4f576128860ee17e4a2b421d3b3157b65ebefc2f24308fec2dd5d369f0fe737"
  },
  "id": "maHp7BWQVGgdakQ4",
  "tags": []
}